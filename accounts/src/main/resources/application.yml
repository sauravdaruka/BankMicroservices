spring:
  application:
    name: accounts # With this app name, this microservice will request for all the relevant configurations (based on activated profile) from config server

  profiles:
    active:
      - "prod"

  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb
    username: root
    password: root
    #url: jdbc:h2:mem:testdb
    #driver-class-name: org.h2.Driver
    #username: sa
    #password: ''

  #h2:
  #  console:
  #    enabled: true

  jpa:
    show-sql: true
    #database-platform: org.hibernate.dialect.H2Dialect
    #hibernate:
    #  ddl-auto: update

  sql:
    init:
      mode: always

  config:
    # import:
    #  - "application_qa_bkp.yml"
    #  - "application_prod_bkp.yml"
    import: "optional:configserver:http://localhost:8071/" # Even if configserver is not started, this microservice will start as optional is used

  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

  #rabbitmq:
    #host: "localhost"
    #port: 5672
    #username: "guest"
    #password: "guest"

management:
  endpoints:
    web:
      exposure:
        include: "*" # Enable and expose all management endpoint supported bu Spring Boot actuator, which also includes endpoint for refreshing the properties at runtime
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled : true

server:
  port: 8080

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info: # This information will be displayed to Eureka dashboard
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"

logging: # Tell Springboot framework to print DEBUG loggers present inside the package com.sauravdaruka.gatewayserver
  level:
    com:
      sauravdaruka:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000

resilience4j.retry:
  configs:
    default: #default means these properties are applicable for all kind of retries that are created inside the microservice. In case of different configuration for different retries, use retry name, in the place of default.
      max-attempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions: # Do not retry for these exceptions
        - java.lang.NullPointerException
      retryExceptions: # Retry only for a specific set of exceptions
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000
      limitRefreshPeriod: 5000 # Renew the quota every 5 sec
      limitForPeriod: 1  # quota


#build:
#  version: "3.0"

#accounts:
#  message: "Welcome to EazyBank accounts related local APIs "
#  contactDetails:
#    name: "John Doe - Developer"
#    email: "john@eazybank.com"
#  onCallSupport:
#    - (555) 555-1234
#    - (555) 523-1345